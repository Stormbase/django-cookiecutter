stages:
  - quality
  - test
  - deploy

cache:
  key: "${CI_JOB_NAME}"
  paths:
    - .cache/pip
    - node_modules
    - .venv

# Templates
.quality-frontend: &quality-frontend
  image: node:12-slim
  stage: quality

.quality-backend-template: &quality-backend
  image: python:3.8-slim
  stage: quality
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

.deploy-heroku: &deploy-heroku
  image: ruby:2.7
  stage: deploy
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:
    # We use a tool developed by Travis CI called dpl: https://github.com/travis-ci/dpl
    - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_API_KEY

# Quality jobs
check-eslint:
  <<: *quality-frontend
  script:
    - yarn install
    - yarn run lint:js

check-stylelint:
  <<: *quality-frontend
  script:
    - yarn install
    - yarn run lint:scss

check-black:
  <<: *quality-backend
  before_script:
    - pip install 'black==19.10b0'
  script: black --check --diff {{cookiecutter.project_slug}} tests

check-isort:
  <<: *quality-backend
  before_script:
    - pip install 'isort[pyproject]==4.3.21'
  script: isort --recursive --check-only --diff {{cookiecutter.project_slug}} tests

# Testing jobs
test_python:
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'
  stage: test
  image: python:3.8
  services:
    - postgres:12-alpine
  variables:
    POETRY_VERSION: 1.0.5
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    POSTGRES_DB: test_db
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: secret
  script:
    - export DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB
    - apt-get update -qy
    - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python && source $HOME/.poetry/env
    - poetry --version
    - poetry config virtualenvs.in-project true
    - poetry install -vv --no-interaction

    - .venv/bin/pytest -n auto --reuse-db --junitxml=report.xml --cov={{cookiecutter.project_slug}} tests
  artifacts:
    reports:
      junit: report.xml

# Staging deployment
staging:
  <<: *deploy-heroku
  variables:
    HEROKU_APP_NAME: {{cookiecutter.heroku_staging_app_name}}
  environment:
    name: staging
    url: https://{{cookiecutter.heroku_staging_app_name}}.herokuapp.com
  only:
    - staging

# Production deployment
production:
  <<: *deploy-heroku
  variables:
    HEROKU_APP_NAME: {{cookiecutter.heroku_production_app_name}}
  environment:
    name: production
    url: https://{{cookiecutter.heroku_production_app_name}}.herokuapp.com
  when: manual  # Manual action is required to deploy to production
  only:
    - production